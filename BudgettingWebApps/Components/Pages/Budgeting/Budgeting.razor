@page "/budgeting"
@rendermode InteractiveServer
@using BudgettingWebApps.Models
@using BudgettingWebApps.Components.Pages.Budgeting.Components
@using BudgettingWebApps.Reposiotories
@using System.Security.Claims
@using BudgettingWebApps.Components.Pages.Budgeting.Dialogs
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles ="user,admin")]

<h3>Budgeting</h3>

<label style="text-anchor:end"><b>Total Income : @GetTotalIncome().ToString("C")</b></label>
<label style="text-anchor:end"><b>Total Expenses : @GetTotalExpenses().ToString("C")</b></label>
<label style="text-anchor:end"><b>Balance : @GetBalance().ToString("C")</b></label>
<br />

<button @onclick="ShowAddIncomeDialog">Add Income</button>

<AddIncomeDialog IsVisible="@isAddIncomeDialogVisible"
                 IsEditMode="@isEditMode"
                 IncomeSource="@incomeSource"
                 Amount="@amount"
                 IncomeId="@incomeId"
                 OnClose="CloseAddIncomeDialog"
                 OnSubmit="HandleIncomeSubmit" />

<table class="table">
    <thead>
        <tr>
            <th>Income Name</th>
            <th>Amount</th>
            <th>Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var income in _income)
        {
            <tr>
                <td>@income.IncomeName</td>
                <td>@income.Amount.ToString("0.00")</td>
                <td>@income.TransactionDate.ToShortDateString()</td>
                <td>
                    <button @onclick="() => EditIncome(income)">Edit</button>
                    <button @onclick="() => DeleteIncome(income.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@* Expense data *@
<button @onclick="ShowAddExpenseDialog">Add Expense</button>
<AddExpenseDialog IsVisible="@isAddExpenseDialogVisible"
                  IsEditExpenseMode="@isEditExpenseMode"
                  ExpenseName="@expenseName"
                  Amount="@expenseAmount"
                  ExpenseId="@expenseId"
                  OnClose="CloseAddExpenseDialog"
                  OnSubmit="HandleExpenseSubmit" />

<table class="table">
    <thead>
        <tr>
            <th>Expense Name</th>
            <th>Amount</th>
            <th>Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var expense in _expense)
        {
            <tr>
                <td>@expense.ExpenseName</td>
                <td>@expense.Amount.ToString("0.00")</td>
                <td>@expense.BudgetMonth.ToShortDateString()</td>
                <td>
                    <button @onclick="() => EditExpense(expense)">Edit</button>
                    <button @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    decimal TotalIncome = 0;
    decimal TotalExpense = 0;
    decimal Balance = 0;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<IncomeDto> _income = new List<IncomeDto>();

    private IEnumerable<ExpenseDto> _expense = new List<ExpenseDto>();

    [Inject]
    private IincomeRepository repository { get; set; } = default!;

    [Inject]
    private IExpenseRepository expenseRepository { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;

        var userIdClaim = user.FindFirst(ClaimTypes.PrimarySid);
        var userId = userIdClaim?.Value;

        var currentuser = Convert.ToInt16(userId);

        _expense = await expenseRepository.GetExpenses(currentuser);

        _income = await repository.GetIncome(currentuser);

        await base.OnInitializedAsync();
    }
    private decimal GetTotalIncome()
    {
        foreach(var income in _income)
        {
            TotalIncome += income.Amount;
        }
        return TotalIncome;
    }
    private decimal GetTotalExpenses()
    {
        foreach(var expense in _expense)
        {
            TotalExpense += expense.Amount;
        }
        return TotalExpense;
    }
    private decimal GetBalance()
    {
        return GetTotalIncome() - GetTotalExpenses();
    }

    private bool isAddIncomeDialogVisible = false;
    private bool isEditMode = false;
    private string incomeSource = string.Empty;
    private decimal amount = 0;
    private int? incomeId = null;

    private bool isAddExpenseDialogVisible = false;
    private bool isEditExpenseMode = false;
    private string expenseName = string.Empty;
    private decimal expenseAmount = 0;
    private int? expenseId = null;

    private void ShowAddIncomeDialog()
    {
        isEditMode = false;
        incomeSource = string.Empty;
        amount = 0;
        incomeId = null;
        isAddIncomeDialogVisible = true;
    }
    private void ShowAddExpenseDialog()
    {
        isEditExpenseMode = false;
        expenseName = string.Empty;
        expenseAmount = 0;
        expenseId = null;
        isAddExpenseDialogVisible = true;
    }

    private void EditIncome(IncomeDto income)
    {
        isEditMode = true;
        incomeSource = income.IncomeName;
        amount = income.Amount;
        incomeId = income.Id;
        isAddIncomeDialogVisible = true;
    }

    private void EditExpense(ExpenseDto expense)
    {
        isEditExpenseMode = true;
        expenseName = expense.ExpenseName;
        expenseAmount = expense.Amount;
        expenseId = expense.Id;
        isAddExpenseDialogVisible = true;
    }

    private void CloseAddIncomeDialog()
    {
        isAddIncomeDialogVisible = false;
    }
    private void CloseAddExpenseDialog()
    {
        isAddExpenseDialogVisible = false;
    }

    private async Task HandleIncomeSubmit((string IncomeSource, decimal Amount, int? IncomeId) incomeDetails)
    {
        if (incomeDetails.IncomeId.HasValue)
        {
            // Update existing income
            var incomeToUpdate = _income.FirstOrDefault(i => i.Id == incomeDetails.IncomeId.Value);
            if (incomeToUpdate != null)
            {
                incomeToUpdate.IncomeName = incomeDetails.IncomeSource;
                incomeToUpdate.Amount = incomeDetails.Amount;
                await repository.UpdateIncome(incomeToUpdate); // Assuming UpdateIncome method exists
            }
        }
        else
        {
            // Add new income
            var newIncome = new IncomeDto
                {
                    IncomeName = incomeDetails.IncomeSource,
                    Amount = incomeDetails.Amount,
                    TransactionDate = DateTime.Now, // Assuming Date is automatically set
                    UserId = Convert.ToInt32(authenticationStateTask.Result.User.FindFirst(ClaimTypes.PrimarySid)?.Value)
                };
            await repository.CreateNewIncome(newIncome); // Assuming AddIncome method exists
        }

        // Refresh the income list
        _income = await repository.GetIncome(Convert.ToInt16(authenticationStateTask.Result.User.FindFirst(ClaimTypes.PrimarySid)?.Value));
        CloseAddIncomeDialog();
    }
    private async Task HandleExpenseSubmit((string ExpenseName, decimal Amount, int? ExpenseId) expenseDetails)
    {
        if (expenseDetails.ExpenseId.HasValue)
        {
            // Update existing expense
            var expenseToUpdate = _expense.FirstOrDefault(i => i.Id == expenseDetails.ExpenseId.Value);
            if (expenseToUpdate != null)
            {
                expenseToUpdate.ExpenseName = expenseDetails.ExpenseName;
                expenseToUpdate.Amount = expenseDetails.Amount;
                await expenseRepository.UpdateExpense(expenseToUpdate); // Assuming UpdateExpense method exists
            }
        }
        else
        {
            // Add new expense
            var newExpense = new ExpenseDto
                {
                    ExpenseName = expenseDetails.ExpenseName,
                    Amount = expenseDetails.Amount,
                    BudgetMonth = DateTime.Now, // Assuming Date is automatically set
                    UserId = Convert.ToInt32(authenticationStateTask.Result.User.FindFirst(ClaimTypes.PrimarySid)?.Value)
                };
            await expenseRepository.AddExpense(newExpense); // Assuming AddExpense method exists
        }

        // Refresh the income list
        _expense = await expenseRepository.GetExpenses(Convert.ToInt16(authenticationStateTask.Result.User.FindFirst(ClaimTypes.PrimarySid)?.Value));
        CloseAddIncomeDialog();
    }
    private async Task DeleteIncome(int incomeId)
    {
        await repository.DeleteIncome(incomeId); // Assuming DeleteIncome method exists
        _income = await repository.GetIncome(Convert.ToInt16(authenticationStateTask.Result.User.FindFirst(ClaimTypes.PrimarySid)?.Value));
    }
    private async Task DeleteExpense(int expenseId)
    {
        await expenseRepository.DeleteExpense(expenseId); // Assuming DeleteExpense method exists
        _expense = await expenseRepository.GetExpenses(Convert.ToInt16(authenticationStateTask.Result.User.FindFirst(ClaimTypes.PrimarySid)?.Value));
    }
}
