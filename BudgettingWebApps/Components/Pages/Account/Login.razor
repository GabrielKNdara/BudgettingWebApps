@page "/login"
@using BudgettingWebApps.Models
@using BudgettingWebApps.Models.ViewModels
@using System.Security.Claims 
@using BudgettingWebApps.Reposiotories
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager navigationManager


<div class="row">
    <div class="col-lg-4 offset-lg-4 pb-4 border">
        <EditForm Model="@currentUser" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <div class="mb-3 text-center flex-column">
                <img src="/Images/Logo.png" style="max-height : 5rem;"/>
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="currentUser.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => currentUser.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="currentUser.Password" placeholder="password" type="password" class="form-control" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
            <div>
             You do not have account? <a class="fw-bolder" href="/signup">click here</a> to create account
            </div> 
            <div>
             You forgot your password <a class="fw-bolder" href="/forgotpassword">click here</a> to create account
            </div>
        </EditForm>
    </div>
</div>


@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }

    [SupplyParameterFromForm]
    public UserDto currentUser { get; set; } = new();

        [Inject]
        private IUserRepository _userRepository { get; set; } = default!;


    private string? errorMessage;

    private async Task Authenticate()
    {
       // try
       // {
        var user = await _userRepository.GetUser(currentUser.UserName);
        if (BCrypt.Net.BCrypt.Verify(currentUser.Password, user.passwordhash)) 
            {

                var claims = new List<Claim>
                 { 
                     
                    new Claim(ClaimTypes.PrimarySid, user.id.ToString()),
                    new Claim(ClaimTypes.Name, currentUser.UserName),
                    new Claim(ClaimTypes.Role, user.role)
                    //    new Claim(ClaimTypes.Role, userDto.Role)// will need to add userDto
                    
                 };
          
                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principle = new ClaimsPrincipal(identity);
                await httpContext.SignInAsync(principle);

                navigationManager.NavigateTo("/");

            }
            else
            {
                errorMessage = "Invalid Username and Password";
                return;
            }





        // }
        // catch (Exception ex)
        // {
        //    // throw new Exception("Wrong password or username please try again", ex);
        //     Console.WriteLine("Wrong password or username please try again", ex);
        // }


        // if(Model.UserName is null || Model.Password is null)
        // {
        //     errorMessage = "Invalid User Name or Password";
        //     return;
        // }
        // var claims = new List<Claim>
        // {
        //     new Claim(ClaimTypes.Name, Model.UserName)
        //    // new Claim(ClaimTypes.Role, userDto.Role) will need to add userDto
        // };
        // var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        // var principle = new ClaimsPrincipal(identity);
        // await httpContext.SignInAsync(principle);

        // navigationManager.NavigateTo("/");
    }

}
