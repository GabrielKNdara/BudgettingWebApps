@page "/signup"
@using System.ComponentModel.DataAnnotations
@using BudgettingWebApps.Models
@using BudgettingWebApps.Reposiotories
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 border">
        <EditForm Model="@user" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/Images/Logo.png" style="max-height : 5rem;" />
                <h3>Sign Up</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="user.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => user.UserName" />
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="user.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => user.Email" />
            </div>
            <div class="mb-3">
                <label>First Name</label>
                <InputText @bind-Value="user.FirstName" class="form-control" placeholder="FirstName" />
                <ValidationMessage For="() => user.FirstName" />
            </div>
            <div class="mb-3">
                <label>Surname</label>
                <InputText @bind-Value="user.Surname" class="form-control" placeholder="Surname" />
                <ValidationMessage For="() => user.Surname" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="user.Password" placeholder="password" type="password" class="form-control" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Signup</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [SupplyParameterFromForm]
    public UserDto user { get; set; } = new();
    private string? errorMessage;
    [Inject]
    private IUserRepository _repository { get; set; } = default!;

    private async Task HandleValidSubmit()
    {
        var createdUser = await _repository.CreateNewUser(user);
        if(createdUser > 0)
        {
            navigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("failed to create a user account!");
        }
    }

}
